def solution(quiz):
    return ["O" if eval(eq.replace('=', '==')) else "X" for eq in quiz]

# eval() 함수는 문자열을 파이썬 표현식으로 평가하고 결과를 반환하는 내장 함수
이 함수는 임의의 코드를 실행할 수 있기 때문에 사용자 입력 등에서 오는 잠재적인 보안 취약점을 가질 수 있음

보안상의 이유들
eval 함수는 문자열로 주어진 코드를 실행할 수 있기 때문에 보안 상의 이유로 주의해야 합니다.

코드 인젝션 (Code Injection): 
    사용자로부터의 입력이나 외부에서 제공되는 데이터를 eval에 직접 전달하는 경우, 악의적인 사용자가 임의의 코드를 주입할 수 있습니다. 
    이로 인해 예상치 못한 동작이나 보안 취약점이 발생할 수 있습니다.

보안 취약점 확대: 
    eval 함수는 임의의 표현식을 실행할 수 있기 때문에, 안전하지 않은 코드가 실행될 경우 전체 애플리케이션의 보안이 약화될 수 있습니다.

문자열 해석의 어려움: eval을 사용하면 코드의 의도를 명확하게 이해하기 어려울 수 있습니다. 
    복잡한 표현식이나 함수 호출 등이 포함된 문자열을 해석하기 쉽지 않아 유지보수와 디버깅이 어려울 수 있습니다.

보안 정책과 충돌: 
    일부 환경에서는 eval을 사용하는 것이 보안 정책과 충돌할 수 있습니다. 
    특히, 코드 검사 도구나 보안 감사 도구에서는 동적으로 생성된 코드를 분석하기 어려울 수 있습니다.

성능 문제: 
    eval 함수는 실행 중에 문자열을 파싱하고 실행하기 때문에 성능 문제가 발생할 수 있습니다.
    특히 반복적으로 호출되는 부분에서는 성능 저하가 나타날 수 있습니다.

따라서 다른 방식의 코딩이 더 안전함(내장[파열]함수라고 하기도 한다더라...)

# 다른 코드
def solution(quiz):
    answer = []
    for q in quiz:
        p, a = q.split("=")
        if eval(p) == int(a):
            answer.append("O")
        else:
            answer.append("X")
    return answer

